let
    //Function definition
    fn = ( tbl as table, domain as text, range as text ) as table =>
    let
        tblBuffered = Table.Buffer(tbl),
        x = List.Buffer( Table.Column(tblBuffered, domain) ),
        y = List.Buffer( Table.Column(tblBuffered, range) ),
        i = List.Numbers( 0, List.Count(x)-1 ),

        //Calculate a list, with each entry the area of the trapezoid for each x.
        //"Number.From" caters for the range being time, date or datetime.
        yΔx = List.Buffer( List.Transform( i, each 
            if _ > 0 
            then 0.5*( y{_} + y{_-1} ) * Number.From( x{_} - x{_-1} )
            else 0
        ) ),        

        ΣyΔx = List.Generate( ()=> [rt = yΔx{0}, index = 0],
            each [index] < List.Count(yΔx),
            each [rt = List.Sum( {[rt], yΔx{[index]+1}} ), index = [index]+1 ],
            each [rt] ),

        //Add the integrated values as a new column.
        headers = Table.ColumnNames(tblBuffered) & {"Σ" & range},
        columns = Table.ToColumns(tblBuffered) & {ΣyΔx}, 
        result = Table.FromColumns( columns, headers ),
        changeType = Table.TransformColumnTypes(result,{{"Σ" & range, type number}})
    in
        changeType,

    //Function type definition
    fnType = type function (
        tbl as (
            type table meta [
                Documentation.FieldCaption = "table"
                //Documentation.FieldDescription = "Numerator",
                //Documentation.SampleValues = {},
                //Documentation.AllowedValues = {},
                //Documentation.IsMultiline = false,
                //Documentation.IsCode = false
            ]
        ),
        domain as (
            type text meta [
                Documentation.FieldCaption = "domain",
                Documentation.FieldDescription = "The name of the column containing the domain."
                //Documentation.SampleValues = {},
                //Documentation.AllowedValues = {},
                //Documentation.IsMultiline = false,
                //Documentation.IsCode = false
            ]
        ),
        range as (
            type text meta [
                Documentation.FieldCaption = "range",
                Documentation.FieldDescription = "The name of the column containing the range."
                //Documentation.SampleValues = {},
                //Documentation.AllowedValues = {},
                //Documentation.IsMultiline = false,
                //Documentation.IsCode = false
            ]
        )
    ) as table meta [
        Documentation.Name = "Integrate",
        Documentation.LongDescription = "
            Find the area under a curve using the Trapezoidal rule.
            Take, as input, a table with a column defining a domain and a column defining the range of the domain.
            These, together, define the curve.
            The function adds a column to the table.
            For each point of the domain it calculates the integral over the range from the origin of the domain to the point.
            The input table should be sorted by the domain, ascending.",
        Documentation.Examples = {[
            Description = "Integrate y = 2x",
            Code = "Integrate( #(cr)   #table( type table [x = number, y = number], {{0,0}, {1,2}, {2,4}, {3,6}} ), #(cr)   ""x"", #(cr)   ""y"" #(cr))", 
            Result = "#table( type table [x = number, y = number, Σ y = number], {{0,0,0}, {1,2,1}, {2,4,4}, {3,6,9}} )"
        ]}
    ]
in
    //Make fnType the type for fn.
    Value.ReplaceType(fn, fnType)
